# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.static_image_mapper_enrichments_recording_fixation_put_response import StaticImageMapperEnrichmentsRecordingFixationPutResponse

class TestStaticImageMapperEnrichmentsRecordingFixationPutResponse(unittest.TestCase):
    """StaticImageMapperEnrichmentsRecordingFixationPutResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StaticImageMapperEnrichmentsRecordingFixationPutResponse:
        """Test StaticImageMapperEnrichmentsRecordingFixationPutResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StaticImageMapperEnrichmentsRecordingFixationPutResponse`
        """
        model = StaticImageMapperEnrichmentsRecordingFixationPutResponse()
        if include_optional:
            return StaticImageMapperEnrichmentsRecordingFixationPutResponse(
                code = 200.0,
                result = openapi_client.models.fixation_datapoint.FixationDatapoint(
                    end_timestamp = 1.337, 
                    fixation_id = 56, 
                    seek_timestamp = 1.337, 
                    start_timestamp = 1.337, 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                status = 'success'
            )
        else:
            return StaticImageMapperEnrichmentsRecordingFixationPutResponse(
        )
        """

    def testStaticImageMapperEnrichmentsRecordingFixationPutResponse(self):
        """Test StaticImageMapperEnrichmentsRecordingFixationPutResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
