# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.recordings_api import RecordingsApi


class TestRecordingsApi(unittest.TestCase):
    """RecordingsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = RecordingsApi()

    def tearDown(self) -> None:
        pass

    def test_create_recording_event(self) -> None:
        """Test case for create_recording_event

        Create recording event
        """
        pass

    def test_delete_recording(self) -> None:
        """Test case for delete_recording

        Delete a recording
        """
        pass

    def test_delete_recording_event_resource(self) -> None:
        """Test case for delete_recording_event_resource

        Delete a recording event
        """
        pass

    def test_delete_recordings(self) -> None:
        """Test case for delete_recordings

        Delete multiple recordings
        """
        pass

    def test_download_raw_data_export_zip(self) -> None:
        """Test case for download_raw_data_export_zip

        """
        pass

    def test_download_recording_file(self) -> None:
        """Test case for download_recording_file

        Download a recording's file
        """
        pass

    def test_download_recording_zip(self) -> None:
        """Test case for download_recording_zip

        Download recording files as a zip file
        """
        pass

    def test_download_recordings_zip(self) -> None:
        """Test case for download_recordings_zip

        Download multiple recordings in zip archive
        """
        pass

    def test_get_apriltags_at_timestamp(self) -> None:
        """Test case for get_apriltags_at_timestamp

        """
        pass

    def test_get_recording(self) -> None:
        """Test case for get_recording

        Returns a recording with {recording_id}
        """
        pass

    def test_get_recording_blinks(self) -> None:
        """Test case for get_recording_blinks

        Recording blinks
        """
        pass

    def test_get_recording_blinks_timeline(self) -> None:
        """Test case for get_recording_blinks_timeline

        Recording blinks timeline
        """
        pass

    def test_get_recording_events(self) -> None:
        """Test case for get_recording_events

        List recording events
        """
        pass

    def test_get_recording_face_detections(self) -> None:
        """Test case for get_recording_face_detections

        Recording face detections
        """
        pass

    def test_get_recording_face_detections_timeline(self) -> None:
        """Test case for get_recording_face_detections_timeline

        Recording face detections
        """
        pass

    def test_get_recording_files(self) -> None:
        """Test case for get_recording_files

        List recording files
        """
        pass

    def test_get_recording_fixations(self) -> None:
        """Test case for get_recording_fixations

        Recording fixations
        """
        pass

    def test_get_recording_fixations_timeline(self) -> None:
        """Test case for get_recording_fixations_timeline

        Recording fixations timeline
        """
        pass

    def test_get_recording_gaze(self) -> None:
        """Test case for get_recording_gaze

        temporary endpoint for player development
        """
        pass

    def test_get_recording_scanpath(self) -> None:
        """Test case for get_recording_scanpath

        Get list of fixation scanpath points per world frame
        """
        pass

    def test_get_recording_scene_camera_intrinsics(self) -> None:
        """Test case for get_recording_scene_camera_intrinsics

        Get Recording's Scene Camera Intrinsics
        """
        pass

    def test_get_recordings(self) -> None:
        """Test case for get_recordings

        List all recordings
        """
        pass

    def test_get_recordings_events_resource(self) -> None:
        """Test case for get_recordings_events_resource

        """
        pass

    def test_patch_recording(self) -> None:
        """Test case for patch_recording

        Update a recording
        """
        pass

    def test_patch_recording_event_resource(self) -> None:
        """Test case for patch_recording_event_resource

        Update a recording event
        """
        pass

    def test_post_recording_event(self) -> None:
        """Test case for post_recording_event

        Create a new recording event
        """
        pass


if __name__ == '__main__':
    unittest.main()
