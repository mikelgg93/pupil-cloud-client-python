# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceResponse(BaseModel):
    """
    WorkspaceResponse
    """ # noqa: E501
    alpha_features: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    created_by_user_id: Optional[StrictStr] = None
    default_template_id: Optional[StrictStr] = None
    deleted_at: Optional[datetime] = None
    deleted_by_user_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    name: StrictStr
    picture_url: Optional[StrictStr] = None
    plan_id: Optional[StrictStr] = None
    raw_file_downloads: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    world_video_mode: Optional[StrictStr] = Field(default=None, description="world video mode")
    __properties: ClassVar[List[str]] = ["alpha_features", "created_at", "created_by_user_id", "default_template_id", "deleted_at", "deleted_by_user_id", "id", "name", "picture_url", "plan_id", "raw_file_downloads", "status", "updated_at", "world_video_mode"]

    @field_validator('world_video_mode')
    def world_video_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'NOUPLOAD', 'BLUR']):
            raise ValueError("must be one of enum values ('NORMAL', 'NOUPLOAD', 'BLUR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "alpha_features",
            "default_template_id",
            "plan_id",
            "raw_file_downloads",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alpha_features": obj.get("alpha_features"),
            "created_at": obj.get("created_at"),
            "created_by_user_id": obj.get("created_by_user_id"),
            "default_template_id": obj.get("default_template_id"),
            "deleted_at": obj.get("deleted_at"),
            "deleted_by_user_id": obj.get("deleted_by_user_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "picture_url": obj.get("picture_url"),
            "plan_id": obj.get("plan_id"),
            "raw_file_downloads": obj.get("raw_file_downloads"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at"),
            "world_video_mode": obj.get("world_video_mode")
        })
        return _obj


