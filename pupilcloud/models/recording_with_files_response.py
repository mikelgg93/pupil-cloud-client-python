# coding: utf-8

"""
Pupil Cloud

Pupil Cloud API

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from pupilcloud.models.offset_correction import OffsetCorrection
from pupilcloud.models.recording_file import RecordingFile


class RecordingWithFilesResponse(BaseModel):
    """
    RecordingWithFilesResponse
    """  # noqa: E501

    android_gaze_offset: Optional[OffsetCorrection] = None
    app_version: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    created_by_user_id: Optional[StrictStr] = None
    device_model: Optional[StrictStr] = None
    device_name: Optional[StrictStr] = None
    duration_ns: Optional[StrictInt] = None
    family: Optional[StrictStr] = None
    file_ids: Optional[List[StrictStr]] = None
    files: Optional[List[RecordingFile]] = None
    gaze_offset: Optional[OffsetCorrection] = None
    gaze_offset_x: Optional[Union[StrictFloat, StrictInt]] = None
    gaze_offset_y: Optional[Union[StrictFloat, StrictInt]] = None
    gazepipeline_status: Optional[StrictStr] = None
    glasses_id: Optional[StrictStr] = None
    has_scanpath: Optional[StrictBool] = False
    id: Optional[StrictStr] = None
    is_blurred: Optional[StrictBool] = False
    is_processed: Optional[StrictBool] = None
    is_silent: Optional[StrictBool] = None
    is_uploaded: Optional[StrictBool] = None
    is_viewable: Optional[StrictBool] = None
    label_ids: Optional[List[StrictStr]] = None
    name: Optional[StrictStr] = None
    preprocessing_error_message: Optional[StrictStr] = None
    recorded_at: Optional[datetime] = None
    recording_hash: Optional[StrictStr] = None
    scene_camera_id: Optional[StrictStr] = None
    sensors: Optional[List[StrictStr]] = None
    size: Optional[StrictInt] = None
    template_data: Optional[Dict[str, List[StrictStr]]] = None
    template_id: Optional[StrictStr] = None
    thumbnail_url: Optional[StrictStr] = None
    transcoded_url: Optional[StrictStr] = None
    transcoding_status: Optional[StrictStr] = None
    trashed_at: Optional[datetime] = None
    trashed_by_user_id: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    uploaded_bytes: Optional[StrictInt] = None
    wearer_id: Optional[StrictStr] = None
    workspace_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "android_gaze_offset",
        "app_version",
        "created_at",
        "created_by_user_id",
        "device_model",
        "device_name",
        "duration_ns",
        "family",
        "file_ids",
        "files",
        "gaze_offset",
        "gaze_offset_x",
        "gaze_offset_y",
        "gazepipeline_status",
        "glasses_id",
        "has_scanpath",
        "id",
        "is_blurred",
        "is_processed",
        "is_silent",
        "is_uploaded",
        "is_viewable",
        "label_ids",
        "name",
        "preprocessing_error_message",
        "recorded_at",
        "recording_hash",
        "scene_camera_id",
        "sensors",
        "size",
        "template_data",
        "template_id",
        "thumbnail_url",
        "transcoded_url",
        "transcoding_status",
        "trashed_at",
        "trashed_by_user_id",
        "updated_at",
        "uploaded_bytes",
        "wearer_id",
        "workspace_id",
    ]

    @field_validator("family")
    def family_validate_enum(cls, value):
        """Validates the enum"""
        valid_values = {"invisible", "neon"}
        if value not in valid_values:
            raise ValueError(f"must be one of the enum values {valid_values}")
        return value

    @field_validator("gazepipeline_status")
    def gazepipeline_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["queued", "processing", "done", "error", "n/a"]):
            raise ValueError(
                "must be one of enum values ('queued', 'processing', 'done', 'error', 'n/a')"
            )
        return value

    @field_validator("transcoding_status")
    def transcoding_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["queued", "processing", "done", "error", "n/a"]):
            raise ValueError(
                "must be one of enum values ('queued', 'processing', 'done', 'error', 'n/a')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecordingWithFilesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_gaze_offset
        if self.android_gaze_offset:
            _dict["android_gaze_offset"] = self.android_gaze_offset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict["files"] = _items
        # override the default output from pydantic by calling `to_dict()` of gaze_offset
        if self.gaze_offset:
            _dict["gaze_offset"] = self.gaze_offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecordingWithFilesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "android_gaze_offset": OffsetCorrection.from_dict(
                    obj["android_gaze_offset"]
                )
                if obj.get("android_gaze_offset") is not None
                else None,
                "app_version": obj.get("app_version"),
                "created_at": obj.get("created_at"),
                "created_by_user_id": obj.get("created_by_user_id"),
                "device_model": obj.get("device_model"),
                "device_name": obj.get("device_name"),
                "duration_ns": obj.get("duration_ns"),
                "family": obj.get("family"),
                "file_ids": obj.get("file_ids"),
                "files": [RecordingFile.from_dict(_item) for _item in obj["files"]]
                if obj.get("files") is not None
                else None,
                "gaze_offset": OffsetCorrection.from_dict(obj["gaze_offset"])
                if obj.get("gaze_offset") is not None
                else None,
                "gaze_offset_x": obj.get("gaze_offset_x"),
                "gaze_offset_y": obj.get("gaze_offset_y"),
                "gazepipeline_status": obj.get("gazepipeline_status"),
                "glasses_id": obj.get("glasses_id"),
                "has_scanpath": obj.get("has_scanpath")
                if obj.get("has_scanpath") is not None
                else False,
                "id": obj.get("id"),
                "is_blurred": obj.get("is_blurred")
                if obj.get("is_blurred") is not None
                else False,
                "is_processed": obj.get("is_processed"),
                "is_silent": obj.get("is_silent"),
                "is_uploaded": obj.get("is_uploaded"),
                "is_viewable": obj.get("is_viewable"),
                "label_ids": obj.get("label_ids"),
                "name": obj.get("name"),
                "preprocessing_error_message": obj.get("preprocessing_error_message"),
                "recorded_at": obj.get("recorded_at"),
                "recording_hash": obj.get("recording_hash"),
                "scene_camera_id": obj.get("scene_camera_id"),
                "sensors": obj.get("sensors"),
                "size": obj.get("size"),
                "template_data": obj.get("template_data"),
                "template_id": obj.get("template_id"),
                "thumbnail_url": obj.get("thumbnail_url"),
                "transcoded_url": obj.get("transcoded_url"),
                "transcoding_status": obj.get("transcoding_status"),
                "trashed_at": obj.get("trashed_at"),
                "trashed_by_user_id": obj.get("trashed_by_user_id"),
                "updated_at": obj.get("updated_at"),
                "uploaded_bytes": obj.get("uploaded_bytes"),
                "wearer_id": obj.get("wearer_id"),
                "workspace_id": obj.get("workspace_id"),
            }
        )
        return _obj
