# coding: utf-8

"""
Pupil Cloud

Pupil Cloud API

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self


class ProjectEnrichment(BaseModel):
    """
    ProjectEnrichment
    """  # noqa: E501

    created_by_user_id: Optional[StrictStr] = None
    deleted_by_user_id: Optional[StrictStr] = None
    enrichment_id: StrictStr
    fps: Optional[StrictInt] = None
    project_id: StrictStr
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "created_by_user_id",
        "deleted_by_user_id",
        "enrichment_id",
        "fps",
        "project_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        # Include additional properties in the dictionary
        _dict.update(self.additional_properties)
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectEnrichment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        additional_properties = {
            k: v for k, v in obj.items() if k not in cls.__properties
        }
        _obj = cls.model_validate(
            {
                "created_by_user_id": obj.get("created_by_user_id"),
                "deleted_by_user_id": obj.get("deleted_by_user_id"),
                "enrichment_id": obj.get("id"),
                "fps": obj.get("fps"),
                "project_id": obj.get("project_id"),
            }
        )
        _obj.additional_properties = additional_properties
        return _obj
